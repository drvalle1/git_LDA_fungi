set
set='general'
switch(set,
general=general,
bg=bg,
bgpng=bgpng,
CC=CC,
f2=f2,
sex=sex,
main=main,
crayons=crayons)
library('Rtools')
install.packages('Rtools')
install.packages('Rtools')
library('Rtools')
install.packages('Rtools350')
library('Rtools')
devtools::install('myfirstpackage')
devtools::install('U:\\R\\packages\\myfirstpackage')
library('myfirstpackage')
?tnorm
devtools::document('myfirstpackage')
devtools::document('U:\\R\\packages\\myfirstpackage1')
# devtools::document('U:\\R\\packages\\myfirstpackage1')
devtools::document('U:\\R\\packages\\myfirstpackage1')
devtools::document('U:\\R\\packages\\myfirstpackage1\\R')
?devtools::document
devtools::document('U:\\R\\packages\\myfirstpackage')
hf=matrix(c(0.3,0.6,0.5,0.5),2,2)
colnames(hf)=c('x','y')
hf
rm(list=ls(all=TRUE))
nobs=300
#locations in unit square
x=runif(nobs)
y=runif(nobs)
wealth=x+y+x*y #upper right corner
dat=data.frame(x=x,y=y,wealth=wealth)
#existing health facilities
hf=matrix(c(0.33,0.66,0.5,0.5),2,2)
colnames(hf)=c('x','y')
x1=(dat$x-hf[1,'x'])^2
y1=(dat$y-hf[1,'y'])^2
dist1=sqrt(x1+y1)
x2=(dat$x-hf[2,'x'])^2
y2=(dat$y-hf[2,'y'])^2
dist2=sqrt(x2+y2)
rm(list=ls(all=TRUE))
nobs=300
#locations in unit square
x=runif(nobs)
y=runif(nobs)
wealth=x+y+x*y #upper right corner
dat=data.frame(x=x,y=y,wealth=wealth)
#existing health facilities
hf=matrix(c(0.33,0.66,0.5,0.5),2,2)
colnames(hf)=c('x','y')
x1=(dat$x-hf[1,'x'])^2
y1=(dat$y-hf[1,'y'])^2
dist1=sqrt(x1+y1)
x2=(dat$x-hf[2,'x'])^2
y2=(dat$y-hf[2,'y'])^2
dist2=sqrt(x2+y2)
dat$dist=apply(cbind(dist1,dist2),1,min)
head(dat)
x0=1
y0=1
x1=2
y1=3
x2=5
y2=3
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
plot(c(x0,x1,x2,xs),c(y0,y1,y2,ys),pch=19)
lines(c(x0,x1),c(y0,y1))
lines(c(x2,xs),c(y2,ys))
#points that define original line
x0=1
y0=1
x1=2
y1=3
#user imputed point
x2=5
y2=3
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
plot(xall,yall,pch=19)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
plot(xall,yall,pch=19,xlim=c(2,5))
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=3
#user imputed point
x2=2
y2=4
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=3
#user imputed point
x2=1.5
y2=2.5
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=3
#user imputed point
x2=1.5
y2=1
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=3
#user imputed point
x2=2
y2=2.5
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=-1
#user imputed point
x2=2
y2=2.5
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=-1
#user imputed point
x2=2
y2=0
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=-1
#user imputed point
x2=1.5
y2=0
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=-1
#user imputed point
x2=1.5
y2=-0.5
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=-1
#user imputed point
x2=0.5
y2=-1
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
rm(list=ls(all=TRUE))
set.seed(4)
nloc=1000
nspp=200
ncommun=5
base=floor(nloc/(ncommun-2))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#export theta
setwd('U:\\GIT_models\\git_LDA_fungi')
nome=paste('theta ',ncommun,'.csv',sep='')
write.csv(theta,nome,row.names=F)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=4
mu.small=-4
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.1),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=2)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=2)
phi[i,]=tmp
}
image(phi)
phi.true=phi
phi[,1:10]
round(phi[,1:10],2)
rm(list=ls(all=TRUE))
set.seed(4)
nloc=1000
nspp=200
ncommun=5
base=floor(nloc/(ncommun-2))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#export theta
setwd('U:\\GIT_models\\git_LDA_fungi')
nome=paste('theta ',ncommun,'.csv',sep='')
write.csv(theta,nome,row.names=F)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=4
mu.small=-4
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.1),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=1)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=1)
phi[i,]=tmp
}
image(phi)
phi.true=phi
round(phi[,1:10],2)
rm(list=ls(all=TRUE))
set.seed(4)
nloc=1000
nspp=200
ncommun=5
base=floor(nloc/(ncommun-2))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
theta[370:390,]
theta[590:600,]
theta[790:800,]
theta[990:1000,]
rm(list=ls(all=TRUE))
set.seed(4)
nloc=1000
nspp=200
ncommun=5
base=floor(nloc/(ncommun-2))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#export theta
setwd('U:\\GIT_models\\git_LDA_fungi')
nome=paste('theta ',ncommun,'.csv',sep='')
write.csv(theta,nome,row.names=F)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=4
mu.small=-4
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.1),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=1)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=1)
phi[i,]=tmp
}
image(phi)
phi.true=phi
#how many unique species does each community have?
teste=rep(0,ncommun)
for (i in 1:nspp){
tmp=ind[,i]
if (sum(tmp)==1){
ind1=which(tmp==1)
teste[ind1]=teste[ind1]+1
}
}
#calculate probabilities
medias=theta%*%phi; dim(medias)
z=matrix(rnorm(nloc*nspp,mean=medias,sd=1),nloc,nspp)
z[1:10,]
image(z[1:10,])
round(z[2:10,])
image(z[2:10,])
filled.contour(z[2:10,])
filled.contour(z[370:380,])
filled.contour(z[590:600,])
filled.contour(z[c(2:10,370:380,590:600),])
filled.contour(z[c(2:10,370:380,590:600,790:800,990:1000),])
