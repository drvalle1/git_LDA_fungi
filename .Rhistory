# theta=theta/sum(theta)
phi.x=rbeta(ncomm,1,1)
phi.y=rbeta(ncomm,1,1)
#useful stuff
phi.xy=phi.x*phi.y
pred.cov[i]=sum(theta*phi.xy)-sum(theta*phi.x)*sum(theta*phi.y);
#simulate data
z=rmultinom(nsim,size=1,prob=theta)
z1=apply(z==1,2,which)
x=rbinom(nsim,size=1,prob=phi.x[z1])
y=rbinom(nsim,size=1,prob=phi.y[z1])
fim=data.frame(x,y)
obs.cov[i]=var(fim)[1,2]
}
rango=range(c(pred.cov,obs.cov))
plot(pred.cov,obs.cov,xlim=rango,ylim=rango)
lines(rango,rango)
sum(theta*phi.x)
theta=c(0.5,0.5)
phi.x=c(1,0)
phi.y=c(0,1)
#useful stuff
phi.xy=phi.x*phi.y
sum(theta*phi.xy)
sum(theta*phi.x)
sum(theta*phi.y);
theta=c(0.5,0.5)
phi.x=c(1,0.2)
phi.y=c(0.8,0.1)
#useful stuff
phi.xy=phi.x*phi.y
sum(theta*phi.xy)
sum(theta*phi.x)
sum(theta*phi.y)
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=10
nspp=2
nobs.per.loc=100000
nteste=100
#to store results
pred.cov=rep(NA,nteste)
obs.cov=rep(NA,nteste)
for (i in 1:nteste){
print(i)
#parameters
theta=rep(NA,ncomm)
theta[]=rgamma(ncomm,3,10)
# theta[]=1/ncomm
theta=theta/sum(theta)
phi.x=rbeta(ncomm,1,1)
phi.y=rbeta(ncomm,1,1)
#useful stuff
phi.xy=phi.x*phi.y
pred.cov[i]=sum(theta*phi.xy)-sum(theta*phi.x)*sum(theta*phi.y);
#simulate data
z=rmultinom(nobs.per.loc,size=1,prob=theta)
z1=apply(z==1,2,which)
x=rbinom(nobs.per.loc,size=1,prob=phi.x[z1])
y=rbinom(nobs.per.loc,size=1,prob=phi.y[z1])
fim=data.frame(x,y)
obs.cov[i]=var(fim)[1,2]
}
rango=range(c(pred.cov,obs.cov))
plot(pred.cov,obs.cov,xlim=rango,ylim=rango)
lines(rango,rango)
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=10
nspp=2
nobs.per.loc=100000
nteste=100
#to store results
pred.cov=rep(NA,nteste)
obs.cov=rep(NA,nteste)
print(i)
#parameters
theta=matrix(NA,ncomm,1)
theta[]=rgamma(ncomm,3,10)
# theta[]=1/ncomm
theta=theta/sum(theta)
phi.x=rbeta(ncomm,1,1)
phi.y=rbeta(ncomm,1,1)
i=1
print(i)
#parameters
theta=matrix(NA,ncomm,1)
theta[]=rgamma(ncomm,3,10)
# theta[]=1/ncomm
theta=theta/sum(theta)
phi.x=rbeta(ncomm,1,1)
phi.y=rbeta(ncomm,1,1)
theta=matrix(NA,ncomm,1)
theta[]=rgamma(ncomm,3,10)
# theta[]=1/ncomm
theta=theta/sum(theta)
theta.thetat=theta%*%t(theta)
dim(theta.thetat)
phi.x=matrix(rbeta(ncomm,1,1),ncomm,1)
phi.y=matrix(rbeta(ncomm,1,1),ncomm,1)
phi.phit=phi.x%*%t(phi.y)
dim(phi.phit)
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=10
nspp=2
nobs.per.loc=100000
nteste=100
#to store results
pred.cov=rep(NA,nteste)
obs.cov=rep(NA,nteste)
for (i in 1:nteste){
print(i)
#parameters
theta=matrix(NA,ncomm,1)
theta[]=rgamma(ncomm,3,10)
# theta[]=1/ncomm
theta=theta/sum(theta)
theta.thetat=theta%*%t(theta)
phi.x=matrix(rbeta(ncomm,1,1),ncomm,1)
phi.y=matrix(rbeta(ncomm,1,1),ncomm,1)
phi.phit=phi.x%*%t(phi.y)
#useful stuff
pred.cov[i]=sum(theta.thetat*phi.phit)-sum(theta*phi.x)*sum(theta*phi.y);
#simulate data
z=rmultinom(nobs.per.loc*2,size=1,prob=theta)
z1=apply(z==1,2,which)
z2=matrix(z1,nobs.perloc,2)
x=rbinom(nobs.per.loc,size=1,prob=phi.x[z2[,1]])
y=rbinom(nobs.per.loc,size=1,prob=phi.y[z2[,2]])
fim=data.frame(x,y)
obs.cov[i]=var(fim)[1,2]
}
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=10
nspp=2
nobs.per.loc=100000
nteste=100
#to store results
pred.cov=rep(NA,nteste)
obs.cov=rep(NA,nteste)
for (i in 1:nteste){
print(i)
#parameters
theta=matrix(NA,ncomm,1)
theta[]=rgamma(ncomm,3,10)
# theta[]=1/ncomm
theta=theta/sum(theta)
theta.thetat=theta%*%t(theta)
phi.x=matrix(rbeta(ncomm,1,1),ncomm,1)
phi.y=matrix(rbeta(ncomm,1,1),ncomm,1)
phi.phit=phi.x%*%t(phi.y)
#useful stuff
pred.cov[i]=sum(theta.thetat*phi.phit)-sum(theta*phi.x)*sum(theta*phi.y);
#simulate data
z=rmultinom(nobs.per.loc*2,size=1,prob=theta)
z1=apply(z==1,2,which)
z2=matrix(z1,nobs.per.loc,2)
x=rbinom(nobs.per.loc,size=1,prob=phi.x[z2[,1]])
y=rbinom(nobs.per.loc,size=1,prob=phi.y[z2[,2]])
fim=data.frame(x,y)
obs.cov[i]=var(fim)[1,2]
}
rango=range(c(pred.cov,obs.cov))
plot(pred.cov,obs.cov,xlim=rango,ylim=rango)
lines(rango,rango)
range(pred.cov)
theta*phi.x
theta*phi.y
sum(theta*phi.x)*sum(theta*phi.y)
sum(theta.thetat*phi.phit)
theta
theta[]=1/ncomm
theta.thetat=theta%*%t(theta)
phi.x=matrix(rbeta(ncomm,1,1),ncomm,1)
phi.y=matrix(rbeta(ncomm,1,1),ncomm,1)
phi.phit=phi.x%*%t(phi.y)
sum(theta.thetat*phi.phit)
sum(theta*phi.x)*sum(theta*phi.y)
phi.x
theta=matrix(c(0.5,0.5),2,1)
theta.thetat=theta%*%t(theta)
phi.x=matrix(c(1,0),2,1)
phi.y=matrix(c(0,1),2,1)
phi.phit=phi.x%*%t(phi.y)
#useful stuff
sum(theta.thetat*phi.phit)-sum(theta*phi.x)*sum(theta*phi.y); ;
phi.x[]=c(1,0.2)
phi.y[]=c(0.8,0.1)
phi.phit=phi.x%*%t(phi.y)
#useful stuff
sum(theta.thetat*phi.phit)-sum(theta*phi.x)*sum(theta*phi.y);
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=10
nspp=2
nobs.per.loc=100000
nteste=100
#to store results
pred.cov=rep(NA,nteste)
obs.cov=rep(NA,nteste)
for (i in 1:nteste){
print(i)
#parameters
# theta=matrix(NA,ncomm,1)
# theta[]=rgamma(ncomm,3,10)
# # theta[]=1/ncomm
# theta=theta/sum(theta)
theta=matrix(c(0.5,0.5),2,1)
theta.thetat=theta%*%t(theta)
# phi.x=matrix(rbeta(ncomm,1,1),ncomm,1)
# phi.y=matrix(rbeta(ncomm,1,1),ncomm,1)
phi.x=matrix(c(1,0),2,1)
phi.y=matrix(c(0,1),2,1)
phi.phit=phi.x%*%t(phi.y)
#useful stuff
pred.cov[i]=sum(theta.thetat*phi.phit)-sum(theta*phi.x)*sum(theta*phi.y);
#simulate data
z=rmultinom(nobs.per.loc*2,size=1,prob=theta)
z1=apply(z==1,2,which)
z2=matrix(z1,nobs.per.loc,2)
x=rbinom(nobs.per.loc,size=1,prob=phi.x[z2[,1]])
y=rbinom(nobs.per.loc,size=1,prob=phi.y[z2[,2]])
fim=data.frame(x,y)
obs.cov[i]=var(fim)[1,2]
}
rango=range(c(pred.cov,obs.cov))
plot(pred.cov,obs.cov,xlim=rango,ylim=rango)
lines(rango,rango)
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=10
nspp=2
nsim=10000
nloc=1000
#to store results
pred.cov=rep(NA,nsim)
obs.cov=rep(NA,nsim)
theta=matrix(NA,nloc,ncomm)
theta[]=rgamma(ncomm*nloc,3,10)
theta=theta/apply(theta,1,sum)
apply(theta,1,sum)
phi.x=matrix(c(1,rep(0,ncomm-1)),ncomm,1)
phi.y=matrix(c(0,1,rep(0,ncomm-2)),ncomm,1)
j=1
z=rmultinom(nspp,size=1,prob=theta[j,])
z1=apply(z==1,2,which)
z1
z
nspp
theta[j,]
z=rmultinom(nspp,size=1,prob=theta[j,])
z
z1=matrix(NA,nloc,nspp)
for (j in 1:nloc){
z=rmultinom(nspp,size=1,prob=theta[j,])
z1[j,]=apply(z==1,2,which)
}
head(z1)
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z2[,2]])
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=10
nspp=2
nsim=10000
nloc=1000
#to store results
pred.cov=rep(NA,nsim)
obs.cov=rep(NA,nsim)
for (i in 1:nsim){
print(i)
#parameters
theta=matrix(NA,nloc,ncomm)
theta[]=rgamma(ncomm*nloc,3,10)
theta=theta/apply(theta,1,sum)
phi.x=matrix(c(1,rep(0,ncomm-1)),ncomm,1)
phi.y=matrix(c(0,1,rep(0,ncomm-2)),ncomm,1)
#simulate data
z1=matrix(NA,nloc,nspp)
for (j in 1:nloc){
z=rmultinom(nspp,size=1,prob=theta[j,])
z1[j,]=apply(z==1,2,which)
}
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i]=cor(fim)[1,2]
}
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=10
nspp=2
nsim=1000
nloc=1000
#to store results
pred.cov=rep(NA,nsim)
obs.cov=rep(NA,nsim)
for (i in 1:nsim){
print(i)
#parameters
theta=matrix(NA,nloc,ncomm)
theta[]=rgamma(ncomm*nloc,3,10)
theta=theta/apply(theta,1,sum)
phi.x=matrix(c(1,rep(0,ncomm-1)),ncomm,1)
phi.y=matrix(c(0,1,rep(0,ncomm-2)),ncomm,1)
#simulate data
z1=matrix(NA,nloc,nspp)
for (j in 1:nloc){
z=rmultinom(nspp,size=1,prob=theta[j,])
z1[j,]=apply(z==1,2,which)
}
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i]=cor(fim)[1,2]
}
hist(obs.cov)
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=10
nspp=2
nsim=1000
nloc=1000
#to store results
pred.cov=rep(NA,nsim)
obs.cov=rep(NA,nsim)
for (i in 1:nsim){
print(i)
#parameters
theta=matrix(NA,nloc,ncomm)
theta[]=rgamma(ncomm*nloc,3,10)
theta=theta/apply(theta,1,sum)
phi.x=matrix(c(1,0,rep(0,ncomm-2)),ncomm,1)
phi.y=matrix(c(0,1,rep(0,ncomm-2)),ncomm,1)
#simulate data
z1=matrix(NA,nloc,nspp)
for (j in 1:nloc){
z=rmultinom(nspp,size=1,prob=theta[j,])
z1[j,]=apply(z==1,2,which)
}
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i]=cor(fim)[1,2]
}
hist(obs.cov)
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=10
nspp=2
nsim=1000
nloc=1000
#to store results
obs.cov=matrix(NA,nsim,2)
for (i in 1:nsim){
print(i)
#theta parameters
theta=matrix(NA,nloc,ncomm)
theta[]=rgamma(ncomm*nloc,3,10)
theta=theta/apply(theta,1,sum)
#simulate data
z1=matrix(NA,nloc,nspp)
for (j in 1:nloc){
z=rmultinom(nspp,size=1,prob=theta[j,])
z1[j,]=apply(z==1,2,which)
}
#phi parameters (negative or small correlation)
phi.x=matrix(c(1,0,rep(0,ncomm-2)),ncomm,1)
phi.y=matrix(c(0,1,rep(0,ncomm-2)),ncomm,1)
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i,1]=cor(fim)[1,2]
#phi parameters (negative or small correlation)
phi.x=matrix(c(0.9,0.05,rep(0,ncomm-2)),ncomm,1)
phi.y=matrix(c(0.8,0.01,rep(0,ncomm-2)),ncomm,1)
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i,2]=cor(fim)[1,2]
}
boxplot(obs.cov)
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=3
nspp=2
nsim=1000
nloc=1000
#to store results
obs.cov=matrix(NA,nsim,2)
for (i in 1:nsim){
print(i)
#theta parameters
theta=matrix(NA,nloc,ncomm)
theta[]=rgamma(ncomm*nloc,3,10)
theta=theta/apply(theta,1,sum)
#simulate data
z1=matrix(NA,nloc,nspp)
for (j in 1:nloc){
z=rmultinom(nspp,size=1,prob=theta[j,])
z1[j,]=apply(z==1,2,which)
}
#phi parameters (negative or small correlation)
phi.x=matrix(c(1,0,rep(0,ncomm-2)),ncomm,1)
phi.y=matrix(c(0,1,rep(0,ncomm-2)),ncomm,1)
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i,1]=cor(fim)[1,2]
#phi parameters (negative or small correlation)
phi.x=matrix(c(0.9,0.05,rep(0,ncomm-2)),ncomm,1)
phi.y=matrix(c(0.8,0.01,rep(0,ncomm-2)),ncomm,1)
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i,2]=cor(fim)[1,2]
}
boxplot(obs.cov)
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=3
nspp=2
nsim=1000
nloc=1000
#to store results
obs.cov=matrix(NA,nsim,2)
for (i in 1:nsim){
print(i)
#theta parameters
theta=matrix(NA,nloc,ncomm)
theta[]=rgamma(ncomm*nloc,3,10)
theta=theta/apply(theta,1,sum)
#simulate data
z1=matrix(NA,nloc,nspp)
for (j in 1:nloc){
z=rmultinom(nspp,size=1,prob=theta[j,])
z1[j,]=apply(z==1,2,which)
}
#phi parameters (negative or small correlation)
phi.x=matrix(c(1,0,rep(0,ncomm-2)),ncomm,1)
phi.y=matrix(c(0,1,rep(0,ncomm-2)),ncomm,1)
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i,1]=cor(fim)[1,2]
#phi parameters (negative or small correlation)
phi.x=matrix(c(0.95,0.05,rep(0,ncomm-2)),ncomm,1)
phi.y=matrix(c(0.9,0.01,rep(0,ncomm-2)),ncomm,1)
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i,2]=cor(fim)[1,2]
}
boxplot(obs.cov)
rep(0,0)
rm(list=ls(all=TRUE))
set.seed(1)
#settings
ncomm=2
nspp=2
nsim=1000
nloc=1000
#to store results
obs.cov=matrix(NA,nsim,2)
for (i in 1:nsim){
print(i)
#theta parameters
theta=matrix(NA,nloc,ncomm)
theta[]=rgamma(ncomm*nloc,3,10)
theta=theta/apply(theta,1,sum)
#simulate data
z1=matrix(NA,nloc,nspp)
for (j in 1:nloc){
z=rmultinom(nspp,size=1,prob=theta[j,])
z1[j,]=apply(z==1,2,which)
}
#phi parameters (negative or small correlation)
phi.x=matrix(c(1,0,rep(0,ncomm-2)),ncomm,1)
phi.y=matrix(c(0,1,rep(0,ncomm-2)),ncomm,1)
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i,1]=cor(fim)[1,2]
#phi parameters (negative or small correlation)
phi.x=matrix(c(0.95,0.05,rep(0,ncomm-2)),ncomm,1)
phi.y=matrix(c(0.9,0.01,rep(0,ncomm-2)),ncomm,1)
x=rbinom(nloc,size=1,prob=phi.x[z1[,1]])
y=rbinom(nloc,size=1,prob=phi.y[z1[,2]])
fim=data.frame(x,y)
obs.cov[i,2]=cor(fim)[1,2]
}
boxplot(obs.cov)
rm(list=ls(all=TRUE))
set.seed(4)
library('Rcpp')
setwd('U:\\GIT_models\\git_LDA_fungi')
source('gibbs LDA fungi functions.R')
sourceCpp('aux1.cpp')
