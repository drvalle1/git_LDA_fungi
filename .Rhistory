#N = length(dat$con)
b1 = 0
z = dat$y
t1 = 0.5
t2 = 1.5
results = matrix(NA, ngibbs, 3)
for(i in 1:ngibbs){
b1 = sample.b1(x=dat$con,z)
z=sample.z(b1,x=dat$con,y,t1,t2)
vec=sample.t(z,y)
t1=vec[1]
t2=vec[2]
results[i,] = c(b1,t1,t2)
}
traceback()
y
z = y
x=dat$con
tnorm(n=sum(y==0), lo=-Inf, hi=t1, mu=b1*x[y==0], sig=1)
tnorm(n=sum(y==1), lo=t1, hi=t2, mu=b1*x[y==1], sig=1)
t1
t2
#simulated data
set.seed(1)
n.con = 100
con = rep(c(0,62.5,125,250,500), each=n.con)
b1 = -0.02
z = rnorm(length(con), mean=b1*con, sd=1)
plot(con,z)
t1=-4.5#quantile(z,1/3)
t2=-1.5#quantile(z,2/3)
y = rep(NA, length(con))
y[z<t1]=0
y[z>t1&z<t2]=1
y[z>t2]=2
dat=data.frame(y=y,con=con)
#FCD for beta1
sample.b1 = function(x,z)
{sigma2 = (sum(x^2) + 1/10)^(-1)
b1 = rnorm(1,sigma2*sum(x*z),sd=sqrt(sigma2))
b1
}
#generates truncated normal variates based on cumulative normal distribution
tnorm <- function(n,lo,hi,mu,sig){
q1 <- pnorm(lo,mu,sig) #cumulative distribution
q2 <- pnorm(hi,mu,sig) #cumulative distribution
z <- runif(n,q1,q2)
z <- qnorm(z,mu,sig)
z[z == -Inf]  <- lo[z == -Inf]
z[z == Inf]   <- hi[z == Inf]
z
}
#FCD for zs
sample.z = function(b1, x, y, t1, t2){
z = y
z[y==0] = tnorm(n=sum(y==0), lo=-Inf, hi=t1, mu=b1*x[y==0], sig=1)
z[y==1] = tnorm(n=sum(y==1), lo=t1, hi=t2, mu=b1*x[y==1], sig=1)
z[y==2] = tnorm(n=sum(y==2), lo=t2, hi=Inf, mu=b1*x[y==2], sig=1)
z
}
#FCD for t1 and t2
sample.t=function(z,y){
cond1=(y==0)
cond2=(y==1)
cond3=(y==2)
t1=runif(1, max(z[cond1]), min(z[cond2]))
t2=runif(1, max(z[cond2]), min(z[cond3]))
c(t1, t2)
}
#Gibbs sampler
#Initial values
ngibbs=1000
#N = length(dat$con)
b1 = 0
z = dat$y
t1 = 0.5
t2 = 1.5
results = matrix(NA, ngibbs, 3)
for(i in 1:ngibbs){
b1 = sample.b1(x=dat$con,z)
z=sample.z(b1,x=dat$con,y,t1,t2)
vec=sample.t(z,y)
t1=vec[1]
t2=vec[2]
results[i,] = c(b1,t1,t2)
}
head(results)
plot(results[,1],type='l')
#simulated data
set.seed(1)
n.con = 100
con = rep(c(0,62.5,125,250,500), each=n.con)
b1 = -0.02
z = rnorm(length(con), mean=b1*con, sd=1)
plot(con,z)
t1=-4.5#quantile(z,1/3)
t2=-1.5#quantile(z,2/3)
y = rep(NA, length(con))
y[z<t1]=0
y[z>t1&z<t2]=1
y[z>t2]=2
dat=data.frame(y=y,con=con)
#FCD for beta1
sample.b1 = function(x,z)
{sigma2 = (sum(x^2) + 1/10)^(-1)
b1 = rnorm(1,sigma2*sum(x*z),sd=sqrt(sigma2))
b1
}
#generates truncated normal variates based on cumulative normal distribution
tnorm <- function(n,lo,hi,mu,sig){
q1 <- pnorm(lo,mu,sig) #cumulative distribution
q2 <- pnorm(hi,mu,sig) #cumulative distribution
z <- runif(n,q1,q2)
z <- qnorm(z,mu,sig)
z[z == -Inf]  <- lo[z == -Inf]
z[z == Inf]   <- hi[z == Inf]
z
}
#FCD for zs
sample.z = function(b1, x, y, t1, t2){
z = y
z[y==0] = tnorm(n=sum(y==0), lo=-Inf, hi=t1, mu=b1*x[y==0], sig=1)
z[y==1] = tnorm(n=sum(y==1), lo=t1, hi=t2, mu=b1*x[y==1], sig=1)
z[y==2] = tnorm(n=sum(y==2), lo=t2, hi=Inf, mu=b1*x[y==2], sig=1)
z
}
#FCD for t1 and t2
sample.t=function(z,y){
cond1=(y==0)
cond2=(y==1)
cond3=(y==2)
t1=runif(1, max(z[cond1]), min(z[cond2]))
t2=runif(1, max(z[cond2]), min(z[cond3]))
c(t1, t2)
}
#Gibbs sampler
#Initial values
ngibbs=10000
#N = length(dat$con)
b1 = 0
z = dat$y
t1 = 0.5
t2 = 1.5
results = matrix(NA, ngibbs, 3)
for(i in 1:ngibbs){
b1 = sample.b1(x=dat$con,z)
z=sample.z(b1,x=dat$con,y,t1,t2)
vec=sample.t(z,y)
t1=vec[1]
t2=vec[2]
results[i,] = c(b1,t1,t2)
}
plot(results[,1],type='l')
plot(results[,2],type='l')
plot(results[,3],type='l')
tuesday='bayes6560'
vec=c('socialscienceblade','baysocc','popeco',
'6560project','bayestrials')
sample(vec,size=length(vec))
rm(list=ls())
set.seed(111)
rm(list=ls())
set.seed(111)
b0=0
b1=0.1
x=seq(from=-5,to=5,length.out=100)
mu=exp(b0+b1*x)
n=0.5
p=n/(mu+n)
denom=1-(p^n)
ey=mu/denom
plot(x,ey)
plot(x,ey,ylim=range(c(ey,mu)))
points(x,mu,col='red')
0.1^0.1
range(denom)
range(1/denom)
hist(ey/mu)
rm(list=ls())
set.seed(111)
b0=0
b1=0.1
x=seq(from=-5,to=5,length.out=100)
mu=exp(b0+b1*x)
n=0.5
p=n/(mu+n)
denom=1-(p^n)
range(1/denom)
ey=mu/denom
plot(x,ey,ylim=range(c(ey,mu)))
points(x,mu,col='red')
rm(list=ls())
set.seed(111)
b0=0
b1=1
x=seq(from=-5,to=5,length.out=100)
mu=exp(b0+b1*x)
n=0.5
p=n/(mu+n)
denom=1-(p^n)
range(1/denom)
ey=mu/denom
plot(x,ey,ylim=range(c(ey,mu)))
points(x,mu,col='red')
rm(list=ls())
set.seed(111)
b0=2
b1=-0.1
x=seq(from=-5,to=5,length.out=100)
mu=exp(b0+b1*x)
n=0.5
p=n/(mu+n)
denom=1-(p^n)
range(1/denom)
ey=mu/denom
plot(x,ey,ylim=range(c(ey,mu)))
points(x,mu,col='red')
0.0001^0.1
?image_convert
?rnbinom
Sys.which("make")
library('devtools')
install_github('drvalle1/EcoCluster',build_vignettes=T)
?EcoCluster::gibbs.SAM()
?EcoCluster::mixture.gibbs
browseVignettes("EcoCluster")
vignette("EcoCluster")
15*15
x=seq(from=-100,to=1000,length.out=1000)
y=500-x
plot(x,y)
x=seq(from=-100,to=1000,length.out=1000)
y1=500-x
y2=(x-100)*(1/3)
plot(x,y1,type='l',ylim=c(0,1000))
lines(x,y2,col='red')
abline(v=400,col='blue')
rect(20,40,70,90,-100)
rect(20,40,70,90,-90000000000000);
?rect
rect(20,40,70,90,col='blue');
rect(20,40,70,90,col='blood red');
rect(20,40,70,90,col='yellow');
rect(20,40,70,90,col='indigo');
rect(20,40,70,90,col='cyan');
x1=seq(from=-1,to=1,length.out=100)
ngroup=2
nparam=2
betas=matrix(c(0,1,0,2),nparam,ngroup)
x1=seq(from=-1,to=1,length.out=100)
ngroup=3
nparam=2
betas=matrix(c(0,1,0,2,0,3),nparam,ngroup)
betas
x1=seq(from=-1,to=1,length.out=100)
ngroup=3
nparam=2
betas=matrix(c(0,1,0,2,0,3),nparam,ngroup)
tmp1=exp(betas[1,1]+betas[2,1]*x1)
tmp2=exp(betas[1,2]+betas[2,2]*x1)
tmp3=exp(betas[1,3]+betas[2,3]*x1)
theta=cbind(tmp1/(tmp1+tmp2+tmp3),
tmp2/(tmp1+tmp2+tmp3),
tmp3/(tmp1+tmp2+tmp3))
head(theta)
betas
plot(x1,theta[,1],type='l')
lines(x1,theta[,2],col='red')
lines(x1,theta[,3],col='blue')
runif(3)
theta=c(0.1,0.9)
gamma1=0.1
theta=c(0.1,0.9)
gamma1=0.1
(gamma1-1)*sum(log(theta))
theta=c(0.5,0.5)
gamma1=0.1
(gamma1-1)*sum(log(theta))
install.packages('tinytex')
install.packages('BIEN')
library('BIEN')
ls()
rm(list=ls())
devtools::install_github("joshcullen/bayesmove")
devtools::install_github("joshcullen/bayesmove")
devtools::install_github("joshcullen/bayesmove")
library(bayesmove)
library(dplyr)
library(ggplot2)
library(purrr)
library(tidyr)
library(stringr)
library(lubridate)
# Load data
data(tracks)
# Check data structure
head(tracks)
devtools::install_github("joshcullen/bayesmove")
install.packages('rlang')
devtools::install_github("joshcullen/bayesmove")
library(bayesmove)
devtools::install_github("joshcullen/bayesmove")
remove.packages("pkgload")
devtools::install_github("joshcullen/bayesmove")
search()
.libPaths()
devtools::install_github("joshcullen/bayesmove")
install.packages('pkgload')
devtools::install_github("joshcullen/bayesmove")
install.packages('backports')
devtools::install_github("joshcullen/bayesmove")
rm(list=ls())
setwd('U:\\independent studies\\lda covariates\\traits')
dat=read.csv('comm characteriz big plot.csv',as.is=T)
head(dat)
plot(dat$BT_B,dat$BT_C)
rango=range(dat[,c('BT_B','BT_C')])
rango
rango=range(dat[,c('BT_B','BT_C')],na.rm=T)
rango
rango=range(dat[,c('BT_B','BT_C')],na.rm=T)
plot(dat$BT_B,dat$BT_C,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
rango=range(dat[,c('SSD_B','SSD_C')],na.rm=T)
plot(dat$SSD_B,dat$SSD_C,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
rango=range(dat[,c('BT_B','BT_C')],na.rm=T)
plot(dat$BT_B,dat$BT_C,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
head(dat)
dat$SSD=apply(dat[,c('SSD_C','SSD_B')],1,mean,na.rm=T)
dat$BT=apply(dat[,c('BT_C','BT_B')],1,mean,na.rm=T)
boxplot(SSD~comm,data=dat)
boxplot(BT~comm,data=dat)
unique(dat$succ)
unique(dat$succ)
dat$pioneer=ifelse(dat$succ=='PIO',1,0)
aggregate(pioneer~comm,data=dat,mean)
unique(dat$succ)
dat$pioneer=ifelse(dat$succ=='PIO',1,0)
dat$denis=1
res=aggregate(pioneer~comm,data=dat,mean)
res1=aggregate(denis~comm,data=dat,sum)
fim=merge(res,res1,all=T)
fim
boxplot(SSD~comm,data=dat) #wood density
boxplot(BT~comm,data=dat) #bark thickness
unique(dat$succ)
dat$pioneer=ifelse(dat$succ=='PIO',1,0)
dat$denis=1
res=aggregate(pioneer~comm,data=dat,mean)
res1=aggregate(denis~comm,data=dat,sum)
fim=merge(res,res1,all=T); fim
rm(list=ls())
setwd('U:\\independent studies\\lda covariates\\traits')
dat=read.csv('comm characteriz big plot.csv',as.is=T)
rango=range(dat[,c('BT_B','BT_C')],na.rm=T)
plot(dat$BT_B,dat$BT_C,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
ggplot(dat, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4)
rm(list=ls())
library('ggplot2')
setwd('U:\\independent studies\\lda covariates\\traits')
dat=read.csv('comm characteriz big plot.csv',as.is=T)
dat$BT=apply(dat[,c('BT_C','BT_B')],1,mean,na.rm=T)
# Change outlier, color, shape and size
ggplot(dat, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4)
dat$comm=as.factor(dat$comm)
ggplot(dat, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4)
ggplot(dat, aes(x=comm, y=BT))
ggplot(dat, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="red",outlier.size=4)
ggplot(dat, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black")
ggplot(dat, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black") +
geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
ggplot(dat, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black") +
geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5)
dat1=dat[!is.na(dat$BT),]
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black") +
geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5)
?geom_dotplot
table(dat1$comm)
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black") +
geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
geom_jitter(shape=16, position=position_jitter(0.2))
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black") +
geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5)
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black") +
# geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
geom_jitter(shape=16, position=position_jitter(0.2))
table(dat1$comm)
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black") +
geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black") +
geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5)
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black") +
geom_dotplot(shape=16,binaxis='y', stackdir='center', dotsize=0.5)
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.colour="black")
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.shape=NA,outlier.colour="black")
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.shape=NA,outlier.colour="black") +
geom_dotplot(shape=16,binaxis='y', stackdir='center', dotsize=0.5)
ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.shape=NA,outlier.colour="black") +
geom_dotplot(shape=16,binaxis='y', stackdir='center', dotsize=0.5) +
xlab('Groups') + ylab('Bark thickness')
table(dat1$comm)
rm(list=ls())
setwd('U:\\independent studies\\lda covariates\\traits')
dat=read.csv('comm characteriz big plot.csv',as.is=T)
rango=range(dat[,c('BT_B','BT_C')],na.rm=T)
plot(dat$BT_B,dat$BT_C,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
rango=range(dat[,c('SSD_B','SSD_C')],na.rm=T)
plot(dat$SSD_B,dat$SSD_C,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
dat$SSD=apply(dat[,c('SSD_C','SSD_B')],1,mean,na.rm=T)
dat$BT=apply(dat[,c('BT_C','BT_B')],1,mean,na.rm=T)
boxplot(SSD~comm,data=dat) #wood density
boxplot(BT~comm,data=dat) #bark thickness
#pioneer species
unique(dat$succ)
dat$pioneer=ifelse(dat$succ=='PIO',1,0)
dat$denis=1
res=aggregate(pioneer~comm,data=dat,mean)
res1=aggregate(denis~comm,data=dat,sum)
fim=merge(res,res1,all=T); fim
rm(list=ls())
library('ggplot2')
setwd('U:\\independent studies\\lda covariates\\traits')
dat=read.csv('comm characteriz big plot.csv',as.is=T)
dat$BT=apply(dat[,c('BT_C','BT_B')],1,mean,na.rm=T)
dat$comm=as.factor(dat$comm)
dat1=dat[!is.na(dat$BT),]
p1=ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.shape=NA,outlier.colour="black") +
geom_dotplot(shape=16,binaxis='y', stackdir='center', dotsize=0.5) +
xlab('Groups') + ylab('Bark thickness')
table(dat1$comm)
setwd('U:\\independent studies\\lda covariates\\bony_big_plot\\gibbs\\derived')
nome='bark thickness.png'
ggsave(file=nome, p1,width=3,height=4.5)
rm(list=ls())
setwd('U:\\independent studies\\lda covariates\\bony_big_plot\\gibbs\\derived')
dat=read.csv('traits big plot.csv',as.is=T)
rango=range(dat[,c('BT_B','BT_C')],na.rm=T)
plot(dat$BT_B,dat$BT_C,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
rango=range(dat[,c('SSD_B','SSD_C')],na.rm=T)
plot(dat$SSD_B,dat$SSD_C,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
dat$SSD=apply(dat[,c('SSD_C','SSD_B')],1,mean,na.rm=T)
dat$BT=apply(dat[,c('BT_C','BT_B')],1,mean,na.rm=T)
boxplot(SSD~comm,data=dat) #wood density
boxplot(BT~comm,data=dat) #bark thickness
boxplot(SSD~comm,data=dat) #wood density
boxplot(BT~comm,data=dat) #bark thickness
#pioneer species
unique(dat$succ)
dat$pioneer=ifelse(dat$succ=='PIO',1,0)
dat$denis=1
res=aggregate(pioneer~comm,data=dat,mean)
res1=aggregate(denis~comm,data=dat,sum)
fim=merge(res,res1,all=T); fim
rm(list=ls())
library('ggplot2')
setwd('U:\\independent studies\\lda covariates\\bony_big_plot\\gibbs\\derived')
dat=read.csv('traits big plot.csv',as.is=T)
dat$BT=apply(dat[,c('BT_C','BT_B')],1,mean,na.rm=T)
dat$comm=as.factor(dat$comm)
dat1=dat[!is.na(dat$BT),]
p1=ggplot(dat1, aes(x=comm, y=BT)) +
geom_boxplot(outlier.shape=NA,outlier.colour="black") +
geom_dotplot(shape=16,binaxis='y', stackdir='center', dotsize=0.5) +
xlab('Groups') + ylab('Bark thickness')
p1
table(dat1$comm)
setwd('U:\\independent studies\\lda covariates\\bony_big_plot\\gibbs\\derived')
nome='bark thickness.png'
ggsave(file=nome, p1,width=3,height=4.5)
rm(list=ls(all=TRUE))
set.seed(12)
library('Rcpp')
# library('MCMCpack')
setwd('U:\\GIT_models\\git_LDA_fungi')
source('gibbs LDA ordinal aux.R')
source('gibbs LDA ordinal main function.R')
sourceCpp('LDA_ordinal_rcpp.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=100
ncomm=5
prop.burn=0
res=LDA_ordinal(dat=dat,ncomm=ncomm,ngibbs=ngibbs,prop.burn=prop.burn)
library('Rcpp')
