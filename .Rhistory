}
teste
#calculate probabilities
medias=theta%*%phi; dim(medias)
z.true=z=matrix(rnorm(nloc*nspp,mean=medias,sd=1),nloc,nspp)
#generate actual observations y
range(z)
break1.true=break1=c(-Inf,seq(from=0,to=6,by=0.1),Inf)
y=matrix(NA,nloc,nspp)
for (i in 2:length(break1)){
cond=z>break1[i-1] & z<break1[i]
y[cond]=i-2
}
tmp=table(y); tmp; length(tmp); length(break1)
setwd('U:\\GIT_models\\git_LDA_fungi')
write.csv(y,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(991)
nloc=100
nspp=200
ncommun=2
base=floor(nloc/(ncommun-1))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
#eliminate zeroes
cond=theta<0.000001
theta[cond]=0.000001
theta=theta/rowSums(theta)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
rm(list=ls(all=TRUE))
set.seed(991)
nloc=100
nspp=200
ncommun=3
base=floor(nloc/(ncommun-1))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
#eliminate zeroes
cond=theta<0.000001
theta[cond]=0.000001
theta=theta/rowSums(theta)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=6
mu.small=2
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.2),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=1)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=1)
phi[i,]=tmp
}
image(phi)
phi.true=phi
#how many unique species does each community have?
teste=rep(0,ncommun)
for (i in 1:nspp){
tmp=ind[,i]
if (sum(tmp)==1){
ind1=which(tmp==1)
teste[ind1]=teste[ind1]+1
}
}
teste
#calculate probabilities
medias=theta%*%phi; dim(medias)
z.true=z=matrix(rnorm(nloc*nspp,mean=medias,sd=1),nloc,nspp)
#generate actual observations y
range(z)
break1.true=break1=c(-Inf,seq(from=0,to=6,by=0.1),Inf)
y=matrix(NA,nloc,nspp)
for (i in 2:length(break1)){
cond=z>break1[i-1] & z<break1[i]
y[cond]=i-2
}
tmp=table(y); tmp; length(tmp); length(break1)
setwd('U:\\GIT_models\\git_LDA_fungi')
write.csv(y,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(1)
library('Rcpp')
# library('MCMCpack')
setwd('U:\\GIT_models\\git_LDA_fungi')
source('gibbs LDA ordinal aux.R')
source('gibbs LDA ordinal function.R')
sourceCpp('LDA_ordinal_rcpp.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
ncomm=3
prop.burn=0.9
res=LDA_ordinal(dat=dat,ncomm=ncomm,ngibbs=ngibbs,prop.burn=prop.burn)
rm(list=ls(all=TRUE))
set.seed(1)
library('Rcpp')
# library('MCMCpack')
setwd('U:\\GIT_models\\git_LDA_fungi')
source('gibbs LDA ordinal aux.R')
source('gibbs LDA ordinal function.R')
sourceCpp('LDA_ordinal_rcpp.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
ncomm=3
prop.burn=0.9
res=LDA_ordinal(dat=dat,ncomm=ncomm,ngibbs=ngibbs,prop.burn=prop.burn)
rm(list=ls(all=TRUE))
set.seed(1)
library('Rcpp')
# library('MCMCpack')
setwd('U:\\GIT_models\\git_LDA_fungi')
source('gibbs LDA ordinal aux.R')
source('gibbs LDA ordinal main function.R')
sourceCpp('LDA_ordinal_rcpp.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
ncomm=3
prop.burn=0.9
res=LDA_ordinal(dat=dat,ncomm=ncomm,ngibbs=ngibbs,prop.burn=prop.burn)
rm(list=ls(all=TRUE))
set.seed(191)
nloc=100
nspp=200
ncommun=3
base=floor(nloc/(ncommun-1))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
#eliminate zeroes
cond=theta<0.000001
theta[cond]=0.000001
theta=theta/rowSums(theta)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=6
mu.small=2
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.2),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=1)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=1)
phi[i,]=tmp
}
image(phi)
phi.true=phi
#how many unique species does each community have?
teste=rep(0,ncommun)
for (i in 1:nspp){
tmp=ind[,i]
if (sum(tmp)==1){
ind1=which(tmp==1)
teste[ind1]=teste[ind1]+1
}
}
teste
#calculate probabilities
medias=theta%*%phi; dim(medias)
z.true=z=matrix(rnorm(nloc*nspp,mean=medias,sd=1),nloc,nspp)
#generate actual observations y
range(z)
break1.true=break1=c(-Inf,seq(from=0,to=6,by=0.1),Inf)
y=matrix(NA,nloc,nspp)
for (i in 2:length(break1)){
cond=z>break1[i-1] & z<break1[i]
y[cond]=i-2
}
tmp=table(y); tmp; length(tmp); length(break1)
setwd('U:\\GIT_models\\git_LDA_fungi')
write.csv(y,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(12)
library('Rcpp')
# library('MCMCpack')
setwd('U:\\GIT_models\\git_LDA_fungi')
source('gibbs LDA ordinal aux.R')
source('gibbs LDA ordinal main function.R')
sourceCpp('LDA_ordinal_rcpp.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
ncomm=3
prop.burn=0.9
res=LDA_ordinal(dat=dat,ncomm=ncomm,ngibbs=ngibbs,prop.burn=prop.burn)
nloc=nrow(dat)
nspp=ncol(dat)
#look at logl
seq1=1:ngibbs
seq1=(ngibbs*0.8):ngibbs
plot(res$logl[seq1],type='l')
seq1=1:ngibbs
plot(res$logl[seq1],type='l')
theta.estim=matrix(res$theta[nrow(res$theta),],nloc,ncomm.max)
boxplot(theta.estim)
theta.estim=matrix(res$theta[nrow(res$theta),],nloc,ncomm)
boxplot(theta.estim)
seq.comm=1:3
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:length(seq.comm)){
lines(1:nloc,theta.estim1[,i],col=i)
lines(1:nloc,theta.true[,i],col=i,lty=3)
}
set.seed(191)
nloc=100
nspp=200
ncommun=3
base=floor(nloc/(ncommun-1))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
#eliminate zeroes
cond=theta<0.000001
theta[cond]=0.000001
theta=theta/rowSums(theta)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=6
mu.small=2
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.2),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=1)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=1)
phi[i,]=tmp
}
image(phi)
phi.true=phi
#how many unique species does each community have?
teste=rep(0,ncommun)
for (i in 1:nspp){
tmp=ind[,i]
if (sum(tmp)==1){
ind1=which(tmp==1)
teste[ind1]=teste[ind1]+1
}
}
teste
#calculate probabilities
medias=theta%*%phi; dim(medias)
z.true=z=matrix(rnorm(nloc*nspp,mean=medias,sd=1),nloc,nspp)
#generate actual observations y
range(z)
break1.true=break1=c(-Inf,seq(from=0,to=6,by=0.1),Inf)
y=matrix(NA,nloc,nspp)
for (i in 2:length(break1)){
cond=z>break1[i-1] & z<break1[i]
y[cond]=i-2
}
tmp=table(y); tmp; length(tmp); length(break1)
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:length(seq.comm)){
lines(1:nloc,theta.estim1[,i],col=i)
lines(1:nloc,theta.true[,i],col=i,lty=3)
}
phi.estim=matrix(colMeans(res$phi),ncomm.max,nspp)[seq.comm,]
rango=range(phi.estim,phi.true)
plot(phi.true,phi.estim,ylim=rango,xlim=rango)
lines(rango,rango)
phi.estim=matrix(colMeans(res$phi),ncomm,nspp)[seq.comm,]
rango=range(phi.estim,phi.true)
plot(phi.true,phi.estim,ylim=rango,xlim=rango)
lines(rango,rango)
break2=break1.true[-c(1,length(break1.true))]
break.estim=colMeans(res$break1)
rango=range(break.estim,break2)
plot(break2,break.estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
rm(list=ls(all=TRUE))
set.seed(291)
nloc=100
nspp=200
ncommun=5
base=floor(nloc/(ncommun-1))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
#eliminate zeroes
cond=theta<0.000001
theta[cond]=0.000001
theta=theta/rowSums(theta)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=6
mu.small=2
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.2),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=1)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=1)
phi[i,]=tmp
}
image(phi)
phi.true=phi
#how many unique species does each community have?
teste=rep(0,ncommun)
for (i in 1:nspp){
tmp=ind[,i]
if (sum(tmp)==1){
ind1=which(tmp==1)
teste[ind1]=teste[ind1]+1
}
}
teste
#calculate probabilities
medias=theta%*%phi; dim(medias)
z.true=z=matrix(rnorm(nloc*nspp,mean=medias,sd=1),nloc,nspp)
#generate actual observations y
range(z)
break1.true=break1=c(-Inf,seq(from=0,to=6,by=0.1),Inf)
y=matrix(NA,nloc,nspp)
for (i in 2:length(break1)){
cond=z>break1[i-1] & z<break1[i]
y[cond]=i-2
}
tmp=table(y); tmp; length(tmp); length(break1)
setwd('U:\\GIT_models\\git_LDA_fungi')
write.csv(y,'fake data.csv',row.names=F)
rm(list=ls(all=TRUE))
set.seed(12)
library('Rcpp')
# library('MCMCpack')
setwd('U:\\GIT_models\\git_LDA_fungi')
source('gibbs LDA ordinal aux.R')
source('gibbs LDA ordinal main function.R')
sourceCpp('LDA_ordinal_rcpp.cpp')
dat=data.matrix(read.csv('fake data.csv',as.is=T))
ngibbs=2000
ncomm=5
prop.burn=0.9
res=LDA_ordinal(dat=dat,ncomm=ncomm,ngibbs=ngibbs,prop.burn=prop.burn)
nloc=nrow(dat)
nspp=ncol(dat)
#look at logl
seq1=1:ngibbs
plot(res$logl[seq1],type='l')
seq1=(ngibbs*0.5):ngibbs
plot(res$logl[seq1],type='l')
seq1=(ngibbs*0.7):ngibbs
plot(res$logl[seq1],type='l')
theta.estim=matrix(res$theta[nrow(res$theta),],nloc,ncomm)
boxplot(theta.estim)
seq.comm=1:5
set.seed(291)
nloc=100
nspp=200
ncommun=5
base=floor(nloc/(ncommun-1))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
#eliminate zeroes
cond=theta<0.000001
theta[cond]=0.000001
theta=theta/rowSums(theta)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=6
mu.small=2
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.2),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=1)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=1)
phi[i,]=tmp
}
image(phi)
phi.true=phi
#how many unique species does each community have?
teste=rep(0,ncommun)
for (i in 1:nspp){
tmp=ind[,i]
if (sum(tmp)==1){
ind1=which(tmp==1)
teste[ind1]=teste[ind1]+1
}
}
teste
#calculate probabilities
medias=theta%*%phi; dim(medias)
z.true=z=matrix(rnorm(nloc*nspp,mean=medias,sd=1),nloc,nspp)
#generate actual observations y
range(z)
break1.true=break1=c(-Inf,seq(from=0,to=6,by=0.1),Inf)
y=matrix(NA,nloc,nspp)
for (i in 2:length(break1)){
cond=z>break1[i-1] & z<break1[i]
y[cond]=i-2
}
tmp=table(y); tmp; length(tmp); length(break1)
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:length(seq.comm)){
lines(1:nloc,theta.estim1[,i],col=i)
lines(1:nloc,theta.true[,i],col=i,lty=3)
}
seq.comm=c(1,3,4,5,2)
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:length(seq.comm)){
lines(1:nloc,theta.estim1[,i],col=i)
lines(1:nloc,theta.true[,i],col=i,lty=3)
}
#look at phi
phi.estim=matrix(colMeans(res$phi),ncomm,nspp)[seq.comm,]
rango=range(phi.estim,phi.true)
plot(phi.true,phi.estim,ylim=rango,xlim=rango)
lines(rango,rango)
#look at breaks
break2=break1.true[-c(1,length(break1.true))]
break.estim=colMeans(res$break1)
rango=range(break.estim,break2)
plot(break2,break.estim,xlim=rango,ylim=rango)
lines(rango,rango,col='red')
