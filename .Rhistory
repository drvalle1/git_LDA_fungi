#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=-1
#user imputed point
x2=2
y2=0
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=-1
#user imputed point
x2=1.5
y2=0
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=-1
#user imputed point
x2=1.5
y2=-0.5
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
#points that define original line
x0=1
y0=1
x1=2
y1=-1
#user imputed point
x2=0.5
y2=-1
#key parameters
b=(y0-y1)/(x0-x1)
a=y0-b*x0
s=-1/b
#closest point in line
xs=((y2-s*x2)-a)/(b-s)
ys=a+b*xs
#graphs
xall=c(x0,x1,x2,xs)
yall=c(y0,y1,y2,ys)
rango=range(c(xall,yall))
plot(xall,yall,pch=19,xlim=rango,ylim=rango)
xtmp=seq(from=min(xall),to=max(xall),length.out=100)
ytmp=a+b*xtmp
lines(xtmp,ytmp)
lines(c(x2,xs),c(y2,ys),col='red')
rm(list=ls(all=TRUE))
set.seed(4)
nloc=1000
nspp=200
ncommun=5
base=floor(nloc/(ncommun-2))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#export theta
setwd('U:\\GIT_models\\git_LDA_fungi')
nome=paste('theta ',ncommun,'.csv',sep='')
write.csv(theta,nome,row.names=F)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=4
mu.small=-4
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.1),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=2)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=2)
phi[i,]=tmp
}
image(phi)
phi.true=phi
phi[,1:10]
round(phi[,1:10],2)
rm(list=ls(all=TRUE))
set.seed(4)
nloc=1000
nspp=200
ncommun=5
base=floor(nloc/(ncommun-2))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#export theta
setwd('U:\\GIT_models\\git_LDA_fungi')
nome=paste('theta ',ncommun,'.csv',sep='')
write.csv(theta,nome,row.names=F)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=4
mu.small=-4
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.1),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=1)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=1)
phi[i,]=tmp
}
image(phi)
phi.true=phi
round(phi[,1:10],2)
rm(list=ls(all=TRUE))
set.seed(4)
nloc=1000
nspp=200
ncommun=5
base=floor(nloc/(ncommun-2))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
theta[370:390,]
theta[590:600,]
theta[790:800,]
theta[990:1000,]
rm(list=ls(all=TRUE))
set.seed(4)
nloc=1000
nspp=200
ncommun=5
base=floor(nloc/(ncommun-2))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#export theta
setwd('U:\\GIT_models\\git_LDA_fungi')
nome=paste('theta ',ncommun,'.csv',sep='')
write.csv(theta,nome,row.names=F)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=4
mu.small=-4
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.1),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=1)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=1)
phi[i,]=tmp
}
image(phi)
phi.true=phi
#how many unique species does each community have?
teste=rep(0,ncommun)
for (i in 1:nspp){
tmp=ind[,i]
if (sum(tmp)==1){
ind1=which(tmp==1)
teste[ind1]=teste[ind1]+1
}
}
#calculate probabilities
medias=theta%*%phi; dim(medias)
z=matrix(rnorm(nloc*nspp,mean=medias,sd=1),nloc,nspp)
z[1:10,]
image(z[1:10,])
round(z[2:10,])
image(z[2:10,])
filled.contour(z[2:10,])
filled.contour(z[370:380,])
filled.contour(z[590:600,])
filled.contour(z[c(2:10,370:380,590:600),])
filled.contour(z[c(2:10,370:380,590:600,790:800,990:1000),])
rm(list=ls(all=TRUE))
set.seed(4)
nloc=1000
nspp=200
ncommun=5
base=floor(nloc/(ncommun-2))
#generate thetas
x=seq(from=-1,to=1,length.out=base)
y=sqrt(1-(x^2))*0.1
min1=0.0001
y[y<min1]=min1
# plot(x,y)
init=floor(nloc/ncommun)
seq1=c(seq(from=1,to=nloc,by=init),nloc)
theta=matrix(min1,nloc,ncommun)
for (i in 1:ncommun){
seq2=seq1[i]:(seq1[i]+base-1)
seq3=seq2[seq2<=nloc]
theta[seq3,i]=y[1:length(seq3)]
}
theta=theta/matrix(apply(theta,1,sum),nloc,ncommun)
theta.true=theta
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun) lines(1:nloc,theta[,i],col=i)
#export theta
setwd('U:\\GIT_models\\git_LDA_fungi')
nome=paste('theta ',ncommun,'.csv',sep='')
write.csv(theta,nome,row.names=F)
#generate phi
phi=matrix(NA,ncommun,nspp)
mu.large=2
mu.small=-2
ind=matrix(rbinom(ncommun*nspp,size=1,prob=0.1),ncommun,nspp)
for (i in 1:ncommun){
ind1=ind[i,]
cond=ind1==1
tmp=rep(NA,nspp)
tmp[cond ]=rnorm(sum( cond),mean=mu.large,sd=1)
tmp[!cond]=rnorm(sum(!cond),mean=mu.small,sd=1)
phi[i,]=tmp
}
image(phi)
phi.true=phi
#how many unique species does each community have?
teste=rep(0,ncommun)
for (i in 1:nspp){
tmp=ind[,i]
if (sum(tmp)==1){
ind1=which(tmp==1)
teste[ind1]=teste[ind1]+1
}
}
#calculate probabilities
medias=theta%*%phi; dim(medias)
z=matrix(rnorm(nloc*nspp,mean=medias,sd=1),nloc,nspp)
nome=paste('fake data',ncommun,'.csv',sep='')
write.csv(z,nome,row.names=F)
set.seed(4)
library('Rcpp')
setwd('U:\\GIT_models\\git_LDA_fungi')
source('gibbs LDA fungi functions.R')
sourceCpp('aux1.cpp')
dat=data.matrix(read.csv('fake data5.csv',as.is=T))
nloc=nrow(dat)
nspp=ncol(dat)
ncommun=5
gamma=0.1
#set initial values
vlk=cbind(matrix(0.5,nloc,ncommun-1),1)
phi=matrix(0,ncommun,nspp)
ones.nloc=rep(1,nloc)
theta=convertVtoTheta(vlk,ones.nloc)
ones.nspp=rep(1,nspp)
#things for MH algorithm
n.vlk=(ncommun-1)*nloc
lo.vlk=rep(0,n.vlk)
hi.vlk=rep(1,n.vlk)
n.phi=ncommun*nspp
#gibbs stuff
ngibbs=10000
accept.output=50
vec.theta=matrix(NA,ngibbs,nloc*ncommun)
vec.phi=matrix(NA,ngibbs,ncommun*nspp)
jump1=list(vlk=matrix(1,nloc,ncommun-1),
phi=matrix(1,ncommun,nspp))
accept1=list(vlk=matrix(0,nloc,ncommun-1),
phi=matrix(0,ncommun,nspp))
param=list(theta=theta,phi=phi,vlk=vlk)
#core MCMC algorithm
for (i in 1:ngibbs){
print(i)
tmp=sample.vlk(param,jump1$vlk)
accept1$vlk=accept1$vlk+tmp$accept
param$vlk=tmp$vlk
param$theta=convertVtoTheta(param$vlk,ones.nloc)
# param$theta=theta.true
tmp=sample.phi(param,jump1$phi)
accept1$phi=accept1$phi+tmp$accept
param$phi=tmp$phi
# param$phi=phi.true
#adaptive piece
if (i%%accept.output==0 & i<1000){
k=print.adapt(accept1z=accept1,jump1z=jump1,accept.output=accept.output)
accept1=k$accept1
jump1=k$jump1
}
#store results
vec.theta[i,]=param$theta
vec.phi[i,]=param$phi
}
seq1=(ngibbs*0.9):ngibbs
theta.estim=matrix(colMeans(vec.theta[seq1,]),nloc,ncommun)
seq.comm=1:5
# seq.comm=c(2,1,5,3,4)
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun){
lines(1:nloc,theta.estim1[,i],col=i)
}
seq.comm=c(2,1,5,3,4)
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun){
lines(1:nloc,theta.estim1[,i],col=i)
}
seq.comm=1:5
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun){
lines(1:nloc,theta.estim1[,i],col=i)
}
seq.comm=c(2,5,1,3,4)
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun){
lines(1:nloc,theta.estim1[,i],col=i)
}
phi.estim=matrix(colMeans(vec.phi[seq1,]),ncommun,nspp)[seq.comm,]
rango=range(phi.estim,phi.true)
plot(phi.true,phi.estim,ylim=rango,xlim=rango)
lines(rango,rango)
set.seed(4)
library('Rcpp')
setwd('U:\\GIT_models\\git_LDA_fungi')
source('gibbs LDA fungi functions.R')
sourceCpp('aux1.cpp')
dat=data.matrix(read.csv('fake data5.csv',as.is=T))
nloc=nrow(dat)
nspp=ncol(dat)
ncommun=10
gamma=0.1
#set initial values
vlk=cbind(matrix(0.5,nloc,ncommun-1),1)
phi=matrix(0,ncommun,nspp)
ones.nloc=rep(1,nloc)
theta=convertVtoTheta(vlk,ones.nloc)
ones.nspp=rep(1,nspp)
#things for MH algorithm
n.vlk=(ncommun-1)*nloc
lo.vlk=rep(0,n.vlk)
hi.vlk=rep(1,n.vlk)
n.phi=ncommun*nspp
#gibbs stuff
ngibbs=10000
accept.output=50
vec.theta=matrix(NA,ngibbs,nloc*ncommun)
vec.phi=matrix(NA,ngibbs,ncommun*nspp)
jump1=list(vlk=matrix(1,nloc,ncommun-1),
phi=matrix(1,ncommun,nspp))
accept1=list(vlk=matrix(0,nloc,ncommun-1),
phi=matrix(0,ncommun,nspp))
param=list(theta=theta,phi=phi,vlk=vlk)
#core MCMC algorithm
for (i in 1:ngibbs){
print(i)
tmp=sample.vlk(param,jump1$vlk)
accept1$vlk=accept1$vlk+tmp$accept
param$vlk=tmp$vlk
param$theta=convertVtoTheta(param$vlk,ones.nloc)
# param$theta=theta.true
tmp=sample.phi(param,jump1$phi)
accept1$phi=accept1$phi+tmp$accept
param$phi=tmp$phi
# param$phi=phi.true
#adaptive piece
if (i%%accept.output==0 & i<1000){
k=print.adapt(accept1z=accept1,jump1z=jump1,accept.output=accept.output)
accept1=k$accept1
jump1=k$jump1
}
#store results
vec.theta[i,]=param$theta
vec.phi[i,]=param$phi
}
seq1=(ngibbs*0.9):ngibbs
theta.estim=matrix(colMeans(vec.theta[seq1,]),nloc,ncommun)
boxplot(theta.estim)
seq.comm=1:5
# seq.comm=c(2,5,1,3,4)
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:ncommun){
lines(1:nloc,theta.estim1[,i],col=i)
}
ncommun
seq.comm=1:5
# seq.comm=c(2,5,1,3,4)
theta.estim1=theta.estim[,seq.comm]
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:5){
lines(1:nloc,theta.estim1[,i],col=i)
}
seq.comm=c(2,5,3,1,4)
theta.estim1=theta.estim[,seq.comm]
plot(NA,NA,xlim=c(0,nloc),ylim=c(0,1))
for (i in 1:5){
lines(1:nloc,theta.estim1[,i],col=i)
}
phi.estim=matrix(colMeans(vec.phi[seq1,]),ncommun,nspp)[seq.comm,]
rango=range(phi.estim,phi.true)
plot(phi.true,phi.estim,ylim=rango,xlim=rango)
lines(rango,rango)
